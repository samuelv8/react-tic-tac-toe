{"version":3,"sources":["components/Square.js","components/Board.js","components/StatusBar.js","components/MoveList.js","components/WinCountTable.js","components/Game.js","redux/store.js","redux/reducers/gameReducer.js","App.js","index.js"],"names":["Square","props","className","onClick","value","Board","cols","rows","i","push","map","j","squares","renderSquare","StatusBar","newGame","status","winner","next","MoveList","moves","gameHistory","step","move","desc","posChanged","x","y","disabled","WinCountTable","winHistory","o","calculateWinner","lines","length","a","b","c","Game","useState","Array","fill","nextPlayer","setGameHistory","stepNumber","setStepNumber","currentWinner","xWinCount","oWinCount","winnerStatus","setWinnerStatus","hist","slice","current","concat","t","handleClick","jumpTo","createStore","state","action","type","App","store","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d3c1f2d5.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nSquare.propTypes = {\n    value: PropTypes.any,\n    onClick: PropTypes.func\n};\n\nexport default function Square(props) {\n    return (\n        <button className='square' onClick={props.onClick}>\n            {props.value}\n        </button>\n    );\n}","import React from 'react';\nimport Square from './Square.js';\nimport PropTypes from 'prop-types';\n\nBoard.propTypes = {\n    squares: PropTypes.array,\n    onClick: PropTypes.func\n}\n\nexport default function Board(props) {\n    const renderSquare = (i) => {\n        return (\n            <Square\n                value={props.squares[i]}\n                onClick={() => props.onClick(i)}\n            />\n        );\n    }\n\n    const cols = [0, 1, 2];\n    const rows = [];\n    for (let i = 0; i < 3; i++) {\n        rows.push(<div className=\"board-row\">{\n            cols.map(j => renderSquare(i * 3 + j)) // hardcoded\n        }</div>)\n    }\n\n    return (\n        <div>\n            {rows}\n        </div>\n    );\n\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\nStatusBar.propTypes = {\n    next: PropTypes.string,\n    winner: PropTypes.string,\n    onClick: PropTypes.func\n}\n\nexport default function StatusBar(props) {\n    let newGame = null;\n    const handleWin = () => {\n        status = 'Winner: ' + props.winner;\n        newGame =\n            <button onClick={props.onClick}>\n                Start a new game.\n            </button>;\n    }\n\n    let status = '';\n    if (props.winner) {\n        handleWin();\n    } else {\n        status = 'Next player: ' + props.next;\n    }\n    return (\n        <div>\n            {status} <span>{newGame}</span>\n        </div>\n\n    );\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\nMoveList.propTypes = {\n    gameHistory: PropTypes.array,\n    step: PropTypes.number,\n    onClick: PropTypes.func\n}\n\nexport default function MoveList(props) {\n    const moves = props.gameHistory.map((step, move) => {\n        const desc = move ?\n            `Go to move #${move} (${step.posChanged.x}, ${step.posChanged.y})` :\n            'Go to game start';\n        return (\n            <li key={move}>\n                <button\n                    onClick={() => props.onClick(move)}\n                    disabled={props.step === move}\n                >\n                    {desc}\n                </button>\n            </li>\n        );\n    });\n\n    return (\n        <ol>\n            {moves}\n        </ol>\n    )\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\nWinCountTable.propTypes = {\n    winHistory: PropTypes.object\n}\n\nexport default function WinCountTable(props) {\n    return(\n        <div>\n            X: {props.winHistory.x} | O: {props.winHistory.o}\n        </div>\n    );\n}","import React, { useState } from 'react';\nimport Board from './Board.js';\nimport StatusBar from './StatusBar.js';\nimport MoveList from './MoveList.js';\nimport WinCountTable from './WinCountTable.js';\n\nfunction Game() {\n    const [gameHistory, setGameHistory] = useState(\n        [{\n            squares: Array(9).fill(null),\n            nextPlayer: 'X',\n            posChanged: null,\n        }]\n    );\n    const [stepNumber, setStepNumber] = useState(0);\n    const [winnerStatus, setWinnerStatus] = useState(\n        {\n            currentWinner: null,\n            xWinCount: 0,\n            oWinCount: 0\n        }\n    );\n\n    const handleClick = (i) => {\n        const hist = gameHistory.slice(0, stepNumber + 1);\n        const current = hist[hist.length - 1];\n        const squares = current.squares.slice();\n        if (squares[i] || winnerStatus.currentWinner) {\n            return;\n        }\n        squares[i] = current.nextPlayer;\n        const next = setNextPlayer(current.nextPlayer);\n        setGameHistory(\n            hist.concat([{\n                squares: squares,\n                nextPlayer: next,\n                posChanged: { x: i % 3, y: 2 - ((i / 3) >> 0) } //hardcoded\n            }])\n        );\n        setStepNumber(hist.length);\n        setWinnerStatus(() => {\n            let t = calculateWinner(squares);\n            return ({\n                currentWinner: t,\n                xWinCount: t === 'X' ? winnerStatus.xWinCount + 1 : winnerStatus.xWinCount,\n                oWinCount: t === 'O' ? winnerStatus.oWinCount + 1 : winnerStatus.oWinCount\n            });\n        });\n    }\n\n    const jumpTo = (step) => {\n        const squares = gameHistory[step].squares.slice();\n        setStepNumber(step);\n        setWinnerStatus(() => ({\n            ...winnerStatus,\n            currentWinner: calculateWinner(squares)\n        }));\n    }\n\n    const handleNewGame = () => {\n        setGameHistory(\n            [{\n                squares: Array(9).fill(null),\n                nextPlayer: 'X',\n                posChanged: null,\n            }]\n        );\n        setStepNumber(0);\n        setWinnerStatus({\n            ...winnerStatus,\n            currentWinner: null\n        });\n    }\n\n    return (\n        <div className=\"game\">\n            <div className=\"game-board\">\n                <Board\n                    squares={gameHistory[stepNumber].squares}\n                    onClick={(i) => handleClick(i)}\n                />\n            </div>\n            <div className=\"game-info\">\n                <StatusBar\n                    next={gameHistory[stepNumber].nextPlayer}\n                    winner={winnerStatus.currentWinner}\n                    onClick={() => handleNewGame()}\n                />\n                <MoveList\n                    gameHistory={gameHistory}\n                    step={stepNumber}\n                    onClick={(move) => jumpTo(move)}\n                />\n            </div>\n            <div className=\"game-info\">\n                <WinCountTable\n                    winHistory={{\n                        x: winnerStatus.xWinCount,\n                        o: winnerStatus.oWinCount\n                    }}\n                />\n            </div>\n        </div>\n    );\n\n}\n\nfunction setNextPlayer(currentPlayer) {\n    switch (currentPlayer) {\n        case 'X':\n            return 'O';\n        default:\n            return 'X';\n    }\n}\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return squares[a];\n        }\n    }\n    return null;\n}\n\nexport default Game;","import { createStore } from \"redux\";\nimport { gameReducer } from \"./reducers/gameReducer\";\n\nexport default createStore(gameReducer);","\nexport function gameReducer(state, action) {\n    switch(action.type) {\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport Game from './components/Game';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nexport default function App() {\n    return (\n        <Provider store={store}>\n            <Game />\n        </Provider>\n    );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);"],"sourceRoot":""}