{"version":3,"sources":["components/Square.js","components/Board.js","components/StatusBar.js","components/MoveList.js","redux/actions/gameActions.js","redux/reducers/gameReducer.js","components/Game.js","components/WelcomePage.js","components/WinCountTable.js","redux/store.js","App.js","index.js"],"names":["Square","props","className","onClick","value","Board","cols","rows","i","push","map","j","squares","renderSquare","StatusBar","setNewGameOption","newGame","status","winner","draw","next","MoveList","moves","gameHistory","step","move","desc","posChanged","x","y","disabled","PLAYER_WINS","NAME_UPDATE","updateName","name","symbol","type","payload","initialState","winnersHistory","players","findNameIdx","findIndex","Game","dispatch","useDispatch","playersNames","useSelector","state","useState","Array","fill","nextPlayer","setGameHistory","stepNumber","setStepNumber","currentWinner","setCurrentWinner","gameDraw","setGameDraw","handleWin","winnerName","playerName","hist","slice","current","length","concat","t","calculateWinner","checkDraw","handleClick","jumpTo","to","every","lines","a","b","c","WelcomePage","onChange","e","target","WinCountTable","history","sort","comparePlayers","item","count","createStore","action","idx","ply","App","store","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.33271ce2.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nSquare.propTypes = {\n    value: PropTypes.any,\n    onClick: PropTypes.func\n};\n\nexport default function Square(props) {\n    return (\n        <button className='square' onClick={props.onClick}>\n            {props.value}\n        </button>\n    );\n}","import React from 'react';\nimport Square from './Square.js';\nimport PropTypes from 'prop-types';\n\nBoard.propTypes = {\n    squares: PropTypes.array,\n    onClick: PropTypes.func\n}\n\nexport default function Board(props) {\n    const renderSquare = (i) => {\n        return (\n            <Square\n                value={props.squares[i]}\n                onClick={() => props.onClick(i)}\n            />\n        );\n    }\n\n    const cols = [0, 1, 2];\n    const rows = [];\n    for (let i = 0; i < 3; i++) {\n        rows.push(<div className=\"board-row\">{\n            cols.map(j => renderSquare(i * 3 + j)) // hardcoded\n        }</div>)\n    }\n\n    return (\n        <div>\n            {rows}\n        </div>\n    );\n\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\nStatusBar.propTypes = {\n    next: PropTypes.string,\n    winner: PropTypes.string,\n    draw: PropTypes.bool,\n    onClick: PropTypes.func\n}\n\nexport default function StatusBar(props) {\n    const handleWin = () => {\n        status = 'Winner: ' + props.winner;\n        setNewGameOption();\n\n    }\n\n    const handleDraw = () => {\n        status = 'Draw.';\n        setNewGameOption();\n\n    }\n\n    const setNewGameOption = () => {\n        newGame =\n            <button onClick={props.onClick}>\n                Start a new game.\n            </button>;\n    }\n\n    let newGame = null;\n    let status = '';\n    if (props.winner) {\n        handleWin();\n    } else if (props.draw) {\n        handleDraw();\n    } else {\n        status = 'Next player: ' + props.next;\n    }\n\n    return (\n        <div>\n            {status} <span>{newGame}</span>\n        </div>\n    );\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\nMoveList.propTypes = {\n    gameHistory: PropTypes.array,\n    step: PropTypes.number,\n    onClick: PropTypes.func\n}\n\nexport default function MoveList(props) {\n    const moves = props.gameHistory.map((step, move) => {\n        const desc = move ?\n            `Go to move #${move} (${step.posChanged.x}, ${step.posChanged.y})` :\n            'Go to game start';\n        return (\n            <li key={move}>\n                <button\n                    onClick={() => props.onClick(move)}\n                    disabled={props.step === move}\n                >\n                    {desc}\n                </button>\n            </li>\n        );\n    });\n\n    return (\n        <ol>\n            {moves}\n        </ol>\n    )\n}","export const PLAYER_WINS = 'PLAYER_WINS';\nexport const NAME_UPDATE = 'NAME_UPDATE';\n\n\nexport const playerWins = (playerName) => ({\n    type: PLAYER_WINS,\n    payload: { playerName }\n});\n\nexport const updateName = (name, symbol) => ({\n    type: NAME_UPDATE,\n    payload: {\n        name: name,\n        symbol: symbol\n    }\n});\n","import { NAME_UPDATE, PLAYER_WINS } from \"../actions/gameActions\";\n\nconst initialState = {\n    winnersHistory: [],\n    players: [\n        {\n            name: 'X',\n            symbol: 'X'\n        },\n        {\n            name: 'O',\n            symbol: 'O'\n        }\n    ]\n}\n\nexport function gameReducer(state = initialState, action) {\n    switch (action.type) {\n        case PLAYER_WINS: {\n            let hist = state.winnersHistory.slice();\n            let idx = hist.findIndex(x => x.name === action.payload.playerName);\n            if (idx + 1) {\n                hist[idx].count += 1;\n            } else {\n                hist = hist.concat([{\n                    name: action.payload.playerName,\n                    count: 1\n                }])\n            }\n            return {\n                ...state,\n                winnersHistory: hist\n            }\n        }\n        case NAME_UPDATE: {\n            let ply = state.players.slice();\n            let idx = findNameIdx(ply, action.payload.symbol)\n            // assumes it will always find idx in array\n            ply[idx].name = action.payload.name;\n            return {\n                ...state,\n                players: ply\n            }\n        }\n        default:\n            return state;\n    }\n}\n\n// Get player's name by it's symbol\nexport function findName(players, symbol) {\n    let idx = findNameIdx(players, symbol);\n    // assumes it will always find idx in array\n    return players[idx].name;\n}\n\nfunction findNameIdx(players, symbol) {\n    return players.findIndex(x => x.symbol === symbol);\n}","import React, { useState } from 'react';\nimport Board from './Board.js';\nimport StatusBar from './StatusBar.js';\nimport MoveList from './MoveList.js';\nimport { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { playerWins } from '../redux/actions/gameActions.js';\nimport { findName } from '../redux/reducers/gameReducer.js';\n\nexport default function Game() {\n    const dispatch = useDispatch();\n    const playersNames = useSelector(state => state.players);\n    \n    const [gameHistory, setGameHistory] = useState(\n        [{\n            squares: Array(9).fill(null),\n            nextPlayer: 'X',\n            posChanged: null,\n        }]\n    );\n    const [stepNumber, setStepNumber] = useState(0);\n    const [currentWinner, setCurrentWinner] = useState(null);\n    const [gameDraw, setGameDraw] = useState(false);\n\n    const handleClick = (i) => {\n        const hist = gameHistory.slice(0, stepNumber + 1);\n        const current = hist[hist.length - 1];\n        const squares = current.squares.slice();\n        if (squares[i] || currentWinner || gameDraw) {\n            return;\n        }\n        squares[i] = current.nextPlayer;\n        const next = setNextPlayer(current.nextPlayer);\n        setGameHistory(\n            hist.concat([{\n                squares: squares,\n                nextPlayer: next,\n                posChanged: { x: i % 3, y: 2 - ((i / 3) >> 0) } //hardcoded\n            }])\n        );\n        setStepNumber(hist.length);\n        setCurrentWinner(() => {\n            let t = calculateWinner(squares);\n            if (t) {\n                handleWin(t);\n            }\n            return t;\n        });\n        setGameDraw(checkDraw(squares));\n    }\n\n    const jumpTo = (step) => {\n        const squares = gameHistory[step].squares.slice();\n        setStepNumber(step);\n        setCurrentWinner(() => calculateWinner(squares));\n        setGameDraw(checkDraw(squares));\n    }\n\n    const handleNewGame = () => {\n        setGameHistory(\n            [{\n                squares: Array(9).fill(null),\n                nextPlayer: 'X',\n                posChanged: null,\n            }]\n        );\n        setStepNumber(0);\n        setCurrentWinner(null);\n        setGameDraw(false);\n    }\n\n    const handleWin = (winner) => {\n        let winnerName = findName(playersNames, winner);\n        dispatch(playerWins(winnerName));\n    }\n\n    return (\n        <div className=\"game\">\n            <div className=\"game-board\">\n                <Board\n                    squares={gameHistory[stepNumber].squares}\n                    onClick={(i) => handleClick(i)}\n                />\n            </div>\n            <div className=\"game-info\">\n                <StatusBar\n                    next={gameHistory[stepNumber].nextPlayer}\n                    winner={currentWinner}\n                    draw={gameDraw}\n                    onClick={() => handleNewGame()}\n                />\n                <MoveList\n                    gameHistory={gameHistory}\n                    step={stepNumber}\n                    onClick={(move) => jumpTo(move)}\n                />\n            </div>\n            <Link to=\"/history\">History</Link>\n        </div>\n    );\n}\n\nfunction setNextPlayer(currentPlayer) {\n    switch (currentPlayer) {\n        case 'X':\n            return 'O';\n        default:\n            return 'X';\n    }\n}\n\n// TODO: smarter draw logic (don't wait to fill the entirely board)\nfunction checkDraw(squares) {\n    return squares.every((value) => (value !== null))\n}\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return squares[a];\n        }\n    }\n    return null;\n}","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { updateName } from '../redux/actions/gameActions';\n\nexport default function WelcomePage() {\n    const dispatch = useDispatch();\n\n    return (\n        <main>\n            <form>\n                <h1>Welcome to Tic Tac Toe game.</h1>\n                <p> Please enter each player&apos;s name below</p>\n                X: <input type=\"text\" onChange={(e) => dispatch(updateName(e.target.value, 'X'))} />\n                <p></p>\n                O: <input type=\"text\" onChange={(e) => dispatch(updateName(e.target.value, 'O'))} />\n                <p></p>\n            </form>\n            <Link to=\"/game\">\n                <button>\n                    Play Game\n                </button>\n            </Link>\n        </main>\n    );\n}","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nexport default function WinCountTable() {\n    const history = useSelector(state => state.winnersHistory).sort(comparePlayers); // sort descending\n\n    return (\n        <table>\n            <thead>\n                <tr>\n                    <th>Name</th>\n                    <th>Wins</th>\n                </tr>\n            </thead>\n            <tbody>\n                {history.map(item => {\n                    return (\n                        <tr key={item.name}>\n                            <td>{item.name}</td>\n                            <td>{item.count}</td>\n                        </tr>\n                    );\n                })}\n            </tbody>\n        </table>\n    );\n}\n\nconst comparePlayers = (a, b) => {\n    if (a.count > b.count) {\n        return -1;\n    }\n    if (a.count < b.count) {\n        return 1;\n    }\n    return 0;\n\n}","import { createStore } from \"redux\";\nimport { gameReducer } from \"./reducers/gameReducer\";\n\nexport default createStore(gameReducer);\n\n// TODO: connect component with store","import React from 'react';\nimport Game from './components/Game';\nimport WelcomePage from './components/WelcomePage';\nimport WinCountTable from './components/WinCountTable';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route\n} from \"react-router-dom\";\n\nexport default function App() {\n\n    return (\n        <Provider store={store}>\n            <Router>\n                <Switch>\n                    <Route path=\"/game\">\n                        <Game />\n                    </Route>\n                    <Route path=\"/history\">\n                        <WinCountTable />\n                    </Route>\n                    <Route path=\"/\">\n                        <WelcomePage />\n                    </Route>\n                </Switch>\n            </Router>\n        </Provider>\n    );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);"],"sourceRoot":""}